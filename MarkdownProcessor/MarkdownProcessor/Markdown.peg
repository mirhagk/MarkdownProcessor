@namespace MarkdownProcessor
@classname MarkdownParser
@using MarkdownProcessor.Nodes

start <IList<Node>>
	= value:document EOF {value}

document <IList<Node>>
	= (docPiece / paragraph / linebreak)*

docPiece <Node>
	= heading / definition

paragraph <Node>
	= value:(paraHelper+) { new ParagraphNode(FlattenList(value))}

paraHelper <IList<ContentNode>>
	= !docPiece value:(content+) newline? {value}

linebreak <Node>
	= ("\n\r" / "\r\n" / '\r' / '\n') { new LineBreakNode()}

heading <Node>
	= atxHeading / setextHeading

atxHeading <Node>
	= level:(headingMatchSymbol+) spaces value:(atxHeadingHelper*) '#'* newlines? {new HeadingNode(value,level.Count)}

atxHeadingHelper <ContentNode>
	= !'#' value:content { value}

headingMatchSymbol <string>
	= '#'

definition <DefinitionNode>
	= linkDefinition

linkDefinition <LinkDefinitionNode>
	= '['  name:text ']: ' spaces source:text { new LinkDefinitionNode(){Name = name, Source = source}}

setextHeading <Node>
	= value:(content*) newline bottomType:setextBottom newline {new HeadingNode(value,bottomType=='='?1:2)}

setextBottom <char>
	= '=' spaces '=' spaces (spaces '=')*  { '='} / '-' spaces '-' spaces (spaces '-')* {'-'}

spaces <string>
	=	' '* {""}

newlines <string>
	= newline+ {""}

newline <string>
	= linebreak {""}

content <ContentNode>
	= bold / italic / link / plain

link <ContentNode>
	= '[' text:((!']' anyChar)+) "](" link:((!')' anyChar)*) ')' { new Link(null,Flatten(text),Flatten(link))}

innerContentNotAsterik <ContentNode>
	= !'*' value:(plain / bold / italic) {value}

innerContentNotUnderscore <ContentNode>
	= !'_' value:(plain / bold / italic) {value}

italic <ContentNode>
	= '*' value:(innerContentNotAsterik+) '*' {new Italics(value,null)} / '_' value:(innerContentNotUnderscore+) '_' {new Italics(value,null)}

bold <ContentNode>
	= '**' value:(innerContentNotAsterik+) '**' {new Bold(value,null)} / '__' value:(innerContentNotUnderscore+) '__' {new Bold(value,null)}

plain <ContentNode>
	= value:anyChar {new Text(null,value)}

EOF
  = !.
  / unexpected:. #ERROR{ "Unexpected character '" + unexpected + "'." }

any <string>
	= [\u0000-\uFFFF]

	
anyChar <string>
	= !('\n' / '\r') any;

text <string>
	= value:(anyChar+) { Flatten(value)}