// -----------------------------------------------------------------------
// <auto-generated>
//   This code was generated by Pegasus 3.1.0.0
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated.
// </auto-generated>
// -----------------------------------------------------------------------

namespace
#line 1 "Markdown.peg"
           MarkdownProcessor
#line default
{
    using System;
    using System.Collections.Generic;
    using Pegasus.Common;
    using
        #line 3 "Markdown.peg"
       MarkdownProcessor.Nodes
        #line default
        ;

    /// <summary>
    ///  Parses a string according to the rules of the <see cref="MarkdownParser" /> grammar.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Pegasus", "3.1.0.0")]
    public
    partial class
    #line 2 "Markdown.peg"
           MarkdownParser
    #line default
    {

        /// <summary>
        ///  Parses a string according to the rules of the <see cref="MarkdownParser" /> grammar.
        /// </summary>
        /// <param name="subject">The parsing subject.</param>
        /// <param name="fileName">The optional file name to use in error messages.</param>
        /// <returns>The <see cref="IList&lt;Node&gt;" /> parsed from <paramref name="subject" />.</returns>
        /// <exception cref="FormatException">
        ///  Thrown when parsing fails against <paramref name="subject"/>.  The exception's <code>Data["cursor"]</code> will be set with the cursor where the fatal error occurred.
        /// </exception>
        public IList<Node> Parse(string subject, string fileName = null)
        {
            var cursor = new Cursor(subject, 0, fileName);
            var result = this.start(ref cursor);
            if (result == null)
            {
                throw ExceptionHelper(cursor, state => "Failed to parse 'start'.");
            }
            return result.Value;
        }

        private IParseResult<
            #line 5 "Markdown.peg"
       IList<Node>
            #line default
            > start(ref Cursor cursor)
        {
            IParseResult<IList<Node>> r0 = null;
            var startCursor0 = cursor;
            IParseResult<IList<Node>> r1 = null;
            var valueStart = cursor;
            r1 = this.document(ref cursor);
            var valueEnd = cursor;
            var value = ValueOrDefault(r1);
            if (r1 != null)
            {
                IParseResult<string> r2 = null;
                r2 = this.EOF(ref cursor);
                if (r2 != null)
                {
                    r0 = this.ReturnHelper<IList<Node>>(startCursor0, ref cursor, state =>
                        #line 6 "Markdown.peg"
                       value
                        #line default
                        );
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<
            #line 8 "Markdown.peg"
          IList<Node>
            #line default
            > document(ref Cursor cursor)
        {
            IParseResult<IList<Node>> r0 = null;
            var startCursor0 = cursor;
            var l0 = new List<Node>();
            while (true)
            {
                IParseResult<Node> r1 = null;
                if (r1 == null)
                {
                    r1 = this.docPiece(ref cursor);
                }
                if (r1 == null)
                {
                    r1 = this.paragraph(ref cursor);
                }
                if (r1 == null)
                {
                    r1 = this.linebreak(ref cursor);
                }
                if (r1 != null)
                {
                    l0.Add(r1.Value);
                }
                else
                {
                    break;
                }
            }
            r0 = this.ReturnHelper<IList<Node>>(startCursor0, ref cursor, state => l0.AsReadOnly());
            return r0;
        }

        private IParseResult<
            #line 11 "Markdown.peg"
          Node
            #line default
            > docPiece(ref Cursor cursor)
        {
            IParseResult<Node> r0 = null;
            if (r0 == null)
            {
                r0 = this.heading(ref cursor);
            }
            if (r0 == null)
            {
                r0 = this.definition(ref cursor);
            }
            return r0;
        }

        private IParseResult<
            #line 14 "Markdown.peg"
           Node
            #line default
            > paragraph(ref Cursor cursor)
        {
            IParseResult<Node> r0 = null;
            var startCursor0 = cursor;
            IParseResult<IList<IList<ContentNode>>> r1 = null;
            var valueStart = cursor;
            var startCursor1 = cursor;
            var l0 = new List<IList<ContentNode>>();
            while (true)
            {
                IParseResult<IList<ContentNode>> r2 = null;
                r2 = this.paraHelper(ref cursor);
                if (r2 != null)
                {
                    l0.Add(r2.Value);
                }
                else
                {
                    break;
                }
            }
            if (l0.Count >= 1)
            {
                r1 = this.ReturnHelper<IList<IList<ContentNode>>>(startCursor1, ref cursor, state => l0.AsReadOnly());
            }
            else
            {
                cursor = startCursor1;
            }
            var valueEnd = cursor;
            var value = ValueOrDefault(r1);
            if (r1 != null)
            {
                r0 = this.ReturnHelper<Node>(startCursor0, ref cursor, state =>
                    #line 15 "Markdown.peg"
                         new ParagraphNode(FlattenList(value))
                    #line default
                    );
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<
            #line 17 "Markdown.peg"
            IList<ContentNode>
            #line default
            > paraHelper(ref Cursor cursor)
        {
            IParseResult<IList<ContentNode>> r0 = null;
            var startCursor0 = cursor;
            IParseResult<string> r1 = null;
            var startCursor1 = cursor;
            IParseResult<Node> r2 = null;
            r2 = this.docPiece(ref cursor);
            cursor = startCursor1;
            if (r2 == null)
            {
                r1 = this.ReturnHelper<string>(cursor, ref cursor, state => string.Empty);
            }
            if (r1 != null)
            {
                IParseResult<IList<ContentNode>> r3 = null;
                var valueStart = cursor;
                var startCursor2 = cursor;
                var l0 = new List<ContentNode>();
                while (true)
                {
                    IParseResult<ContentNode> r4 = null;
                    r4 = this.content(ref cursor);
                    if (r4 != null)
                    {
                        l0.Add(r4.Value);
                    }
                    else
                    {
                        break;
                    }
                }
                if (l0.Count >= 1)
                {
                    r3 = this.ReturnHelper<IList<ContentNode>>(startCursor2, ref cursor, state => l0.AsReadOnly());
                }
                else
                {
                    cursor = startCursor2;
                }
                var valueEnd = cursor;
                var value = ValueOrDefault(r3);
                if (r3 != null)
                {
                    IParseResult<IList<string>> r5 = null;
                    var startCursor3 = cursor;
                    var l1 = new List<string>();
                    while (l1.Count < 1)
                    {
                        IParseResult<string> r6 = null;
                        r6 = this.newline(ref cursor);
                        if (r6 != null)
                        {
                            l1.Add(r6.Value);
                        }
                        else
                        {
                            break;
                        }
                    }
                    r5 = this.ReturnHelper<IList<string>>(startCursor3, ref cursor, state => l1.AsReadOnly());
                    if (r5 != null)
                    {
                        r0 = this.ReturnHelper<IList<ContentNode>>(startCursor0, ref cursor, state =>
                            #line 18 "Markdown.peg"
                                        value
                            #line default
                            );
                    }
                    else
                    {
                        cursor = startCursor0;
                    }
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<
            #line 20 "Markdown.peg"
           Node
            #line default
            > linebreak(ref Cursor cursor)
        {
            IParseResult<Node> r0 = null;
            var startCursor0 = cursor;
            IParseResult<string> r1 = null;
            if (r1 == null)
            {
                r1 = this.ParseLiteral(ref cursor, "\n\r");
            }
            if (r1 == null)
            {
                r1 = this.ParseLiteral(ref cursor, "\r\n");
            }
            if (r1 == null)
            {
                r1 = this.ParseLiteral(ref cursor, "\r");
            }
            if (r1 == null)
            {
                r1 = this.ParseLiteral(ref cursor, "\n");
            }
            if (r1 != null)
            {
                r0 = this.ReturnHelper<Node>(startCursor0, ref cursor, state =>
                    #line 21 "Markdown.peg"
                                     new LineBreakNode()
                    #line default
                    );
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<
            #line 23 "Markdown.peg"
         Node
            #line default
            > heading(ref Cursor cursor)
        {
            IParseResult<Node> r0 = null;
            if (r0 == null)
            {
                r0 = this.atxHeading(ref cursor);
            }
            if (r0 == null)
            {
                r0 = this.setextHeading(ref cursor);
            }
            return r0;
        }

        private IParseResult<
            #line 26 "Markdown.peg"
            Node
            #line default
            > atxHeading(ref Cursor cursor)
        {
            IParseResult<Node> r0 = null;
            var startCursor0 = cursor;
            IParseResult<IList<string>> r1 = null;
            var levelStart = cursor;
            var startCursor1 = cursor;
            var l0 = new List<string>();
            while (true)
            {
                IParseResult<string> r2 = null;
                r2 = this.headingMatchSymbol(ref cursor);
                if (r2 != null)
                {
                    l0.Add(r2.Value);
                }
                else
                {
                    break;
                }
            }
            if (l0.Count >= 1)
            {
                r1 = this.ReturnHelper<IList<string>>(startCursor1, ref cursor, state => l0.AsReadOnly());
            }
            else
            {
                cursor = startCursor1;
            }
            var levelEnd = cursor;
            var level = ValueOrDefault(r1);
            if (r1 != null)
            {
                IParseResult<string> r3 = null;
                r3 = this.spaces(ref cursor);
                if (r3 != null)
                {
                    IParseResult<IList<ContentNode>> r4 = null;
                    var valueStart = cursor;
                    var startCursor2 = cursor;
                    var l1 = new List<ContentNode>();
                    while (true)
                    {
                        IParseResult<ContentNode> r5 = null;
                        r5 = this.atxHeadingHelper(ref cursor);
                        if (r5 != null)
                        {
                            l1.Add(r5.Value);
                        }
                        else
                        {
                            break;
                        }
                    }
                    r4 = this.ReturnHelper<IList<ContentNode>>(startCursor2, ref cursor, state => l1.AsReadOnly());
                    var valueEnd = cursor;
                    var value = ValueOrDefault(r4);
                    if (r4 != null)
                    {
                        IParseResult<IList<string>> r6 = null;
                        var startCursor3 = cursor;
                        var l2 = new List<string>();
                        while (true)
                        {
                            IParseResult<string> r7 = null;
                            r7 = this.ParseLiteral(ref cursor, "#");
                            if (r7 != null)
                            {
                                l2.Add(r7.Value);
                            }
                            else
                            {
                                break;
                            }
                        }
                        r6 = this.ReturnHelper<IList<string>>(startCursor3, ref cursor, state => l2.AsReadOnly());
                        if (r6 != null)
                        {
                            IParseResult<IList<string>> r8 = null;
                            var startCursor4 = cursor;
                            var l3 = new List<string>();
                            while (l3.Count < 1)
                            {
                                IParseResult<string> r9 = null;
                                r9 = this.newlines(ref cursor);
                                if (r9 != null)
                                {
                                    l3.Add(r9.Value);
                                }
                                else
                                {
                                    break;
                                }
                            }
                            r8 = this.ReturnHelper<IList<string>>(startCursor4, ref cursor, state => l3.AsReadOnly());
                            if (r8 != null)
                            {
                                r0 = this.ReturnHelper<Node>(startCursor0, ref cursor, state =>
                                    #line 27 "Markdown.peg"
                                                                                new HeadingNode(value,level.Count)
                                    #line default
                                    );
                            }
                            else
                            {
                                cursor = startCursor0;
                            }
                        }
                        else
                        {
                            cursor = startCursor0;
                        }
                    }
                    else
                    {
                        cursor = startCursor0;
                    }
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<
            #line 29 "Markdown.peg"
                  ContentNode
            #line default
            > atxHeadingHelper(ref Cursor cursor)
        {
            IParseResult<ContentNode> r0 = null;
            var startCursor0 = cursor;
            IParseResult<string> r1 = null;
            var startCursor1 = cursor;
            IParseResult<string> r2 = null;
            r2 = this.ParseLiteral(ref cursor, "#");
            cursor = startCursor1;
            if (r2 == null)
            {
                r1 = this.ReturnHelper<string>(cursor, ref cursor, state => string.Empty);
            }
            if (r1 != null)
            {
                IParseResult<ContentNode> r3 = null;
                var valueStart = cursor;
                r3 = this.content(ref cursor);
                var valueEnd = cursor;
                var value = ValueOrDefault(r3);
                if (r3 != null)
                {
                    r0 = this.ReturnHelper<ContentNode>(startCursor0, ref cursor, state =>
                        #line 30 "Markdown.peg"
                        value
                        #line default
                        );
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<
            #line 32 "Markdown.peg"
                    string
            #line default
            > headingMatchSymbol(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            r0 = this.ParseLiteral(ref cursor, "#");
            return r0;
        }

        private IParseResult<
            #line 35 "Markdown.peg"
            DefinitionNode
            #line default
            > definition(ref Cursor cursor)
        {
            IParseResult<DefinitionNode> r0 = null;
            r0 = this.linkDefinition(ref cursor);
            return r0;
        }

        private IParseResult<
            #line 38 "Markdown.peg"
                LinkDefinitionNode
            #line default
            > linkDefinition(ref Cursor cursor)
        {
            IParseResult<LinkDefinitionNode> r0 = null;
            var startCursor0 = cursor;
            IParseResult<string> r1 = null;
            r1 = this.ParseLiteral(ref cursor, "[");
            if (r1 != null)
            {
                IParseResult<string> r2 = null;
                var nameStart = cursor;
                r2 = this.text(ref cursor);
                var nameEnd = cursor;
                var name = ValueOrDefault(r2);
                if (r2 != null)
                {
                    IParseResult<string> r3 = null;
                    r3 = this.ParseLiteral(ref cursor, "]: ");
                    if (r3 != null)
                    {
                        IParseResult<string> r4 = null;
                        r4 = this.spaces(ref cursor);
                        if (r4 != null)
                        {
                            IParseResult<string> r5 = null;
                            var sourceStart = cursor;
                            r5 = this.text(ref cursor);
                            var sourceEnd = cursor;
                            var source = ValueOrDefault(r5);
                            if (r5 != null)
                            {
                                r0 = this.ReturnHelper<LinkDefinitionNode>(startCursor0, ref cursor, state =>
                                    #line 39 "Markdown.peg"
                                             new LinkDefinitionNode(){Name = name, Source = source}
                                    #line default
                                    );
                            }
                            else
                            {
                                cursor = startCursor0;
                            }
                        }
                        else
                        {
                            cursor = startCursor0;
                        }
                    }
                    else
                    {
                        cursor = startCursor0;
                    }
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<
            #line 41 "Markdown.peg"
               Node
            #line default
            > setextHeading(ref Cursor cursor)
        {
            IParseResult<Node> r0 = null;
            var startCursor0 = cursor;
            IParseResult<IList<ContentNode>> r1 = null;
            var valueStart = cursor;
            var startCursor1 = cursor;
            var l0 = new List<ContentNode>();
            while (true)
            {
                IParseResult<ContentNode> r2 = null;
                r2 = this.content(ref cursor);
                if (r2 != null)
                {
                    l0.Add(r2.Value);
                }
                else
                {
                    break;
                }
            }
            r1 = this.ReturnHelper<IList<ContentNode>>(startCursor1, ref cursor, state => l0.AsReadOnly());
            var valueEnd = cursor;
            var value = ValueOrDefault(r1);
            if (r1 != null)
            {
                IParseResult<string> r3 = null;
                r3 = this.newline(ref cursor);
                if (r3 != null)
                {
                    IParseResult<char> r4 = null;
                    var bottomTypeStart = cursor;
                    r4 = this.setextBottom(ref cursor);
                    var bottomTypeEnd = cursor;
                    var bottomType = ValueOrDefault(r4);
                    if (r4 != null)
                    {
                        IParseResult<string> r5 = null;
                        r5 = this.newline(ref cursor);
                        if (r5 != null)
                        {
                            r0 = this.ReturnHelper<Node>(startCursor0, ref cursor, state =>
                                #line 42 "Markdown.peg"
                                                             new HeadingNode(value,bottomType=='='?1:2)
                                #line default
                                );
                        }
                        else
                        {
                            cursor = startCursor0;
                        }
                    }
                    else
                    {
                        cursor = startCursor0;
                    }
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<
            #line 44 "Markdown.peg"
              char
            #line default
            > setextBottom(ref Cursor cursor)
        {
            IParseResult<char> r0 = null;
            if (r0 == null)
            {
                var startCursor0 = cursor;
                IParseResult<string> r1 = null;
                r1 = this.ParseLiteral(ref cursor, "=");
                if (r1 != null)
                {
                    IParseResult<string> r2 = null;
                    r2 = this.spaces(ref cursor);
                    if (r2 != null)
                    {
                        IParseResult<string> r3 = null;
                        r3 = this.ParseLiteral(ref cursor, "=");
                        if (r3 != null)
                        {
                            IParseResult<string> r4 = null;
                            r4 = this.spaces(ref cursor);
                            if (r4 != null)
                            {
                                IParseResult<IList<string>> r5 = null;
                                var startCursor1 = cursor;
                                var l0 = new List<string>();
                                while (true)
                                {
                                    IParseResult<string> r6 = null;
                                    var startCursor2 = cursor;
                                    IParseResult<string> r7 = null;
                                    r7 = this.spaces(ref cursor);
                                    if (r7 != null)
                                    {
                                        IParseResult<string> r8 = null;
                                        r8 = this.ParseLiteral(ref cursor, "=");
                                        if (r8 != null)
                                        {
                                            {
                                                var len = cursor.Location - startCursor2.Location;
                                                r6 = this.ReturnHelper<string>(startCursor2, ref cursor, state =>
                                                    state.Subject.Substring(startCursor2.Location, len)
                                                    );
                                            }
                                        }
                                        else
                                        {
                                            cursor = startCursor2;
                                        }
                                    }
                                    else
                                    {
                                        cursor = startCursor2;
                                    }
                                    if (r6 != null)
                                    {
                                        l0.Add(r6.Value);
                                    }
                                    else
                                    {
                                        break;
                                    }
                                }
                                r5 = this.ReturnHelper<IList<string>>(startCursor1, ref cursor, state => l0.AsReadOnly());
                                if (r5 != null)
                                {
                                    r0 = this.ReturnHelper<char>(startCursor0, ref cursor, state =>
                                        #line 45 "Markdown.peg"
                                          '='
                                        #line default
                                        );
                                }
                                else
                                {
                                    cursor = startCursor0;
                                }
                            }
                            else
                            {
                                cursor = startCursor0;
                            }
                        }
                        else
                        {
                            cursor = startCursor0;
                        }
                    }
                    else
                    {
                        cursor = startCursor0;
                    }
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            if (r0 == null)
            {
                var startCursor3 = cursor;
                IParseResult<string> r9 = null;
                r9 = this.ParseLiteral(ref cursor, "-");
                if (r9 != null)
                {
                    IParseResult<string> r10 = null;
                    r10 = this.spaces(ref cursor);
                    if (r10 != null)
                    {
                        IParseResult<string> r11 = null;
                        r11 = this.ParseLiteral(ref cursor, "-");
                        if (r11 != null)
                        {
                            IParseResult<string> r12 = null;
                            r12 = this.spaces(ref cursor);
                            if (r12 != null)
                            {
                                IParseResult<IList<string>> r13 = null;
                                var startCursor4 = cursor;
                                var l1 = new List<string>();
                                while (true)
                                {
                                    IParseResult<string> r14 = null;
                                    var startCursor5 = cursor;
                                    IParseResult<string> r15 = null;
                                    r15 = this.spaces(ref cursor);
                                    if (r15 != null)
                                    {
                                        IParseResult<string> r16 = null;
                                        r16 = this.ParseLiteral(ref cursor, "-");
                                        if (r16 != null)
                                        {
                                            {
                                                var len = cursor.Location - startCursor5.Location;
                                                r14 = this.ReturnHelper<string>(startCursor5, ref cursor, state =>
                                                    state.Subject.Substring(startCursor5.Location, len)
                                                    );
                                            }
                                        }
                                        else
                                        {
                                            cursor = startCursor5;
                                        }
                                    }
                                    else
                                    {
                                        cursor = startCursor5;
                                    }
                                    if (r14 != null)
                                    {
                                        l1.Add(r14.Value);
                                    }
                                    else
                                    {
                                        break;
                                    }
                                }
                                r13 = this.ReturnHelper<IList<string>>(startCursor4, ref cursor, state => l1.AsReadOnly());
                                if (r13 != null)
                                {
                                    r0 = this.ReturnHelper<char>(startCursor3, ref cursor, state =>
                                        #line 45 "Markdown.peg"
                                                                                      '-'
                                        #line default
                                        );
                                }
                                else
                                {
                                    cursor = startCursor3;
                                }
                            }
                            else
                            {
                                cursor = startCursor3;
                            }
                        }
                        else
                        {
                            cursor = startCursor3;
                        }
                    }
                    else
                    {
                        cursor = startCursor3;
                    }
                }
                else
                {
                    cursor = startCursor3;
                }
            }
            return r0;
        }

        private IParseResult<
            #line 47 "Markdown.peg"
        string
            #line default
            > spaces(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            var startCursor0 = cursor;
            IParseResult<IList<string>> r1 = null;
            var startCursor1 = cursor;
            var l0 = new List<string>();
            while (true)
            {
                IParseResult<string> r2 = null;
                r2 = this.ParseLiteral(ref cursor, " ");
                if (r2 != null)
                {
                    l0.Add(r2.Value);
                }
                else
                {
                    break;
                }
            }
            r1 = this.ReturnHelper<IList<string>>(startCursor1, ref cursor, state => l0.AsReadOnly());
            if (r1 != null)
            {
                r0 = this.ReturnHelper<string>(startCursor0, ref cursor, state =>
                    #line 48 "Markdown.peg"
         ""
                    #line default
                    );
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<
            #line 50 "Markdown.peg"
          string
            #line default
            > newlines(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            var startCursor0 = cursor;
            IParseResult<IList<string>> r1 = null;
            var startCursor1 = cursor;
            var l0 = new List<string>();
            while (true)
            {
                IParseResult<string> r2 = null;
                r2 = this.newline(ref cursor);
                if (r2 != null)
                {
                    l0.Add(r2.Value);
                }
                else
                {
                    break;
                }
            }
            if (l0.Count >= 1)
            {
                r1 = this.ReturnHelper<IList<string>>(startCursor1, ref cursor, state => l0.AsReadOnly());
            }
            else
            {
                cursor = startCursor1;
            }
            if (r1 != null)
            {
                r0 = this.ReturnHelper<string>(startCursor0, ref cursor, state =>
                    #line 51 "Markdown.peg"
             ""
                    #line default
                    );
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<
            #line 53 "Markdown.peg"
         string
            #line default
            > newline(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            var startCursor0 = cursor;
            IParseResult<Node> r1 = null;
            r1 = this.linebreak(ref cursor);
            if (r1 != null)
            {
                r0 = this.ReturnHelper<string>(startCursor0, ref cursor, state =>
                    #line 54 "Markdown.peg"
              ""
                    #line default
                    );
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<
            #line 56 "Markdown.peg"
         ContentNode
            #line default
            > content(ref Cursor cursor)
        {
            IParseResult<ContentNode> r0 = null;
            if (r0 == null)
            {
                r0 = this.bold(ref cursor);
            }
            if (r0 == null)
            {
                r0 = this.italic(ref cursor);
            }
            if (r0 == null)
            {
                r0 = this.link(ref cursor);
            }
            if (r0 == null)
            {
                r0 = this.plain(ref cursor);
            }
            return r0;
        }

        private IParseResult<
            #line 59 "Markdown.peg"
      ContentNode
            #line default
            > link(ref Cursor cursor)
        {
            IParseResult<ContentNode> r0 = null;
            var startCursor0 = cursor;
            IParseResult<string> r1 = null;
            r1 = this.ParseLiteral(ref cursor, "[");
            if (r1 != null)
            {
                IParseResult<IList<string>> r2 = null;
                var textStart = cursor;
                var startCursor1 = cursor;
                var l0 = new List<string>();
                while (true)
                {
                    IParseResult<string> r3 = null;
                    var startCursor2 = cursor;
                    IParseResult<string> r4 = null;
                    var startCursor3 = cursor;
                    IParseResult<string> r5 = null;
                    r5 = this.ParseLiteral(ref cursor, "]");
                    cursor = startCursor3;
                    if (r5 == null)
                    {
                        r4 = this.ReturnHelper<string>(cursor, ref cursor, state => string.Empty);
                    }
                    if (r4 != null)
                    {
                        IParseResult<string> r6 = null;
                        r6 = this.anyChar(ref cursor);
                        if (r6 != null)
                        {
                            {
                                var len = cursor.Location - startCursor2.Location;
                                r3 = this.ReturnHelper<string>(startCursor2, ref cursor, state =>
                                    state.Subject.Substring(startCursor2.Location, len)
                                    );
                            }
                        }
                        else
                        {
                            cursor = startCursor2;
                        }
                    }
                    else
                    {
                        cursor = startCursor2;
                    }
                    if (r3 != null)
                    {
                        l0.Add(r3.Value);
                    }
                    else
                    {
                        break;
                    }
                }
                if (l0.Count >= 1)
                {
                    r2 = this.ReturnHelper<IList<string>>(startCursor1, ref cursor, state => l0.AsReadOnly());
                }
                else
                {
                    cursor = startCursor1;
                }
                var textEnd = cursor;
                var text = ValueOrDefault(r2);
                if (r2 != null)
                {
                    IParseResult<string> r7 = null;
                    r7 = this.ParseLiteral(ref cursor, "](");
                    if (r7 != null)
                    {
                        IParseResult<IList<string>> r8 = null;
                        var linkStart = cursor;
                        var startCursor4 = cursor;
                        var l1 = new List<string>();
                        while (true)
                        {
                            IParseResult<string> r9 = null;
                            var startCursor5 = cursor;
                            IParseResult<string> r10 = null;
                            var startCursor6 = cursor;
                            IParseResult<string> r11 = null;
                            r11 = this.ParseLiteral(ref cursor, ")");
                            cursor = startCursor6;
                            if (r11 == null)
                            {
                                r10 = this.ReturnHelper<string>(cursor, ref cursor, state => string.Empty);
                            }
                            if (r10 != null)
                            {
                                IParseResult<string> r12 = null;
                                r12 = this.anyChar(ref cursor);
                                if (r12 != null)
                                {
                                    {
                                        var len = cursor.Location - startCursor5.Location;
                                        r9 = this.ReturnHelper<string>(startCursor5, ref cursor, state =>
                                            state.Subject.Substring(startCursor5.Location, len)
                                            );
                                    }
                                }
                                else
                                {
                                    cursor = startCursor5;
                                }
                            }
                            else
                            {
                                cursor = startCursor5;
                            }
                            if (r9 != null)
                            {
                                l1.Add(r9.Value);
                            }
                            else
                            {
                                break;
                            }
                        }
                        r8 = this.ReturnHelper<IList<string>>(startCursor4, ref cursor, state => l1.AsReadOnly());
                        var linkEnd = cursor;
                        var link = ValueOrDefault(r8);
                        if (r8 != null)
                        {
                            IParseResult<string> r13 = null;
                            r13 = this.ParseLiteral(ref cursor, ")");
                            if (r13 != null)
                            {
                                r0 = this.ReturnHelper<ContentNode>(startCursor0, ref cursor, state =>
                                    #line 60 "Markdown.peg"
                                                                new Link(null,Flatten(text),Flatten(link))
                                    #line default
                                    );
                            }
                            else
                            {
                                cursor = startCursor0;
                            }
                        }
                        else
                        {
                            cursor = startCursor0;
                        }
                    }
                    else
                    {
                        cursor = startCursor0;
                    }
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<
            #line 62 "Markdown.peg"
                        ContentNode
            #line default
            > innerContentNotAsterik(ref Cursor cursor)
        {
            IParseResult<ContentNode> r0 = null;
            var startCursor0 = cursor;
            IParseResult<string> r1 = null;
            var startCursor1 = cursor;
            IParseResult<string> r2 = null;
            r2 = this.ParseLiteral(ref cursor, "*");
            cursor = startCursor1;
            if (r2 == null)
            {
                r1 = this.ReturnHelper<string>(cursor, ref cursor, state => string.Empty);
            }
            if (r1 != null)
            {
                IParseResult<ContentNode> r3 = null;
                var valueStart = cursor;
                if (r3 == null)
                {
                    r3 = this.plain(ref cursor);
                }
                if (r3 == null)
                {
                    r3 = this.bold(ref cursor);
                }
                if (r3 == null)
                {
                    r3 = this.italic(ref cursor);
                }
                var valueEnd = cursor;
                var value = ValueOrDefault(r3);
                if (r3 != null)
                {
                    r0 = this.ReturnHelper<ContentNode>(startCursor0, ref cursor, state =>
                        #line 63 "Markdown.peg"
                                       value
                        #line default
                        );
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<
            #line 65 "Markdown.peg"
                           ContentNode
            #line default
            > innerContentNotUnderscore(ref Cursor cursor)
        {
            IParseResult<ContentNode> r0 = null;
            var startCursor0 = cursor;
            IParseResult<string> r1 = null;
            var startCursor1 = cursor;
            IParseResult<string> r2 = null;
            r2 = this.ParseLiteral(ref cursor, "_");
            cursor = startCursor1;
            if (r2 == null)
            {
                r1 = this.ReturnHelper<string>(cursor, ref cursor, state => string.Empty);
            }
            if (r1 != null)
            {
                IParseResult<ContentNode> r3 = null;
                var valueStart = cursor;
                if (r3 == null)
                {
                    r3 = this.plain(ref cursor);
                }
                if (r3 == null)
                {
                    r3 = this.bold(ref cursor);
                }
                if (r3 == null)
                {
                    r3 = this.italic(ref cursor);
                }
                var valueEnd = cursor;
                var value = ValueOrDefault(r3);
                if (r3 != null)
                {
                    r0 = this.ReturnHelper<ContentNode>(startCursor0, ref cursor, state =>
                        #line 66 "Markdown.peg"
                                       value
                        #line default
                        );
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<
            #line 68 "Markdown.peg"
        ContentNode
            #line default
            > italic(ref Cursor cursor)
        {
            IParseResult<ContentNode> r0 = null;
            if (r0 == null)
            {
                var startCursor0 = cursor;
                IParseResult<string> r1 = null;
                r1 = this.ParseLiteral(ref cursor, "*");
                if (r1 != null)
                {
                    IParseResult<IList<ContentNode>> r2 = null;
                    var valueStart = cursor;
                    var startCursor1 = cursor;
                    var l0 = new List<ContentNode>();
                    while (true)
                    {
                        IParseResult<ContentNode> r3 = null;
                        r3 = this.innerContentNotAsterik(ref cursor);
                        if (r3 != null)
                        {
                            l0.Add(r3.Value);
                        }
                        else
                        {
                            break;
                        }
                    }
                    if (l0.Count >= 1)
                    {
                        r2 = this.ReturnHelper<IList<ContentNode>>(startCursor1, ref cursor, state => l0.AsReadOnly());
                    }
                    else
                    {
                        cursor = startCursor1;
                    }
                    var valueEnd = cursor;
                    var value = ValueOrDefault(r2);
                    if (r2 != null)
                    {
                        IParseResult<string> r4 = null;
                        r4 = this.ParseLiteral(ref cursor, "*");
                        if (r4 != null)
                        {
                            r0 = this.ReturnHelper<ContentNode>(startCursor0, ref cursor, state =>
                                #line 69 "Markdown.peg"
                                            new Italics(value,null)
                                #line default
                                );
                        }
                        else
                        {
                            cursor = startCursor0;
                        }
                    }
                    else
                    {
                        cursor = startCursor0;
                    }
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            if (r0 == null)
            {
                var startCursor2 = cursor;
                IParseResult<string> r5 = null;
                r5 = this.ParseLiteral(ref cursor, "_");
                if (r5 != null)
                {
                    IParseResult<IList<ContentNode>> r6 = null;
                    var valueStart = cursor;
                    var startCursor3 = cursor;
                    var l1 = new List<ContentNode>();
                    while (true)
                    {
                        IParseResult<ContentNode> r7 = null;
                        r7 = this.innerContentNotUnderscore(ref cursor);
                        if (r7 != null)
                        {
                            l1.Add(r7.Value);
                        }
                        else
                        {
                            break;
                        }
                    }
                    if (l1.Count >= 1)
                    {
                        r6 = this.ReturnHelper<IList<ContentNode>>(startCursor3, ref cursor, state => l1.AsReadOnly());
                    }
                    else
                    {
                        cursor = startCursor3;
                    }
                    var valueEnd = cursor;
                    var value = ValueOrDefault(r6);
                    if (r6 != null)
                    {
                        IParseResult<string> r8 = null;
                        r8 = this.ParseLiteral(ref cursor, "_");
                        if (r8 != null)
                        {
                            r0 = this.ReturnHelper<ContentNode>(startCursor2, ref cursor, state =>
                                #line 69 "Markdown.peg"
                                                                                                                   new Italics(value,null)
                                #line default
                                );
                        }
                        else
                        {
                            cursor = startCursor2;
                        }
                    }
                    else
                    {
                        cursor = startCursor2;
                    }
                }
                else
                {
                    cursor = startCursor2;
                }
            }
            return r0;
        }

        private IParseResult<
            #line 71 "Markdown.peg"
      ContentNode
            #line default
            > bold(ref Cursor cursor)
        {
            IParseResult<ContentNode> r0 = null;
            if (r0 == null)
            {
                var startCursor0 = cursor;
                IParseResult<string> r1 = null;
                r1 = this.ParseLiteral(ref cursor, "**");
                if (r1 != null)
                {
                    IParseResult<IList<ContentNode>> r2 = null;
                    var valueStart = cursor;
                    var startCursor1 = cursor;
                    var l0 = new List<ContentNode>();
                    while (true)
                    {
                        IParseResult<ContentNode> r3 = null;
                        r3 = this.innerContentNotAsterik(ref cursor);
                        if (r3 != null)
                        {
                            l0.Add(r3.Value);
                        }
                        else
                        {
                            break;
                        }
                    }
                    if (l0.Count >= 1)
                    {
                        r2 = this.ReturnHelper<IList<ContentNode>>(startCursor1, ref cursor, state => l0.AsReadOnly());
                    }
                    else
                    {
                        cursor = startCursor1;
                    }
                    var valueEnd = cursor;
                    var value = ValueOrDefault(r2);
                    if (r2 != null)
                    {
                        IParseResult<string> r4 = null;
                        r4 = this.ParseLiteral(ref cursor, "**");
                        if (r4 != null)
                        {
                            r0 = this.ReturnHelper<ContentNode>(startCursor0, ref cursor, state =>
                                #line 72 "Markdown.peg"
                                              new Bold(value,null)
                                #line default
                                );
                        }
                        else
                        {
                            cursor = startCursor0;
                        }
                    }
                    else
                    {
                        cursor = startCursor0;
                    }
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            if (r0 == null)
            {
                var startCursor2 = cursor;
                IParseResult<string> r5 = null;
                r5 = this.ParseLiteral(ref cursor, "__");
                if (r5 != null)
                {
                    IParseResult<IList<ContentNode>> r6 = null;
                    var valueStart = cursor;
                    var startCursor3 = cursor;
                    var l1 = new List<ContentNode>();
                    while (true)
                    {
                        IParseResult<ContentNode> r7 = null;
                        r7 = this.innerContentNotUnderscore(ref cursor);
                        if (r7 != null)
                        {
                            l1.Add(r7.Value);
                        }
                        else
                        {
                            break;
                        }
                    }
                    if (l1.Count >= 1)
                    {
                        r6 = this.ReturnHelper<IList<ContentNode>>(startCursor3, ref cursor, state => l1.AsReadOnly());
                    }
                    else
                    {
                        cursor = startCursor3;
                    }
                    var valueEnd = cursor;
                    var value = ValueOrDefault(r6);
                    if (r6 != null)
                    {
                        IParseResult<string> r8 = null;
                        r8 = this.ParseLiteral(ref cursor, "__");
                        if (r8 != null)
                        {
                            r0 = this.ReturnHelper<ContentNode>(startCursor2, ref cursor, state =>
                                #line 72 "Markdown.peg"
                                                                                                                    new Bold(value,null)
                                #line default
                                );
                        }
                        else
                        {
                            cursor = startCursor2;
                        }
                    }
                    else
                    {
                        cursor = startCursor2;
                    }
                }
                else
                {
                    cursor = startCursor2;
                }
            }
            return r0;
        }

        private IParseResult<
            #line 74 "Markdown.peg"
       ContentNode
            #line default
            > plain(ref Cursor cursor)
        {
            IParseResult<ContentNode> r0 = null;
            var startCursor0 = cursor;
            IParseResult<string> r1 = null;
            var valueStart = cursor;
            r1 = this.anyChar(ref cursor);
            var valueEnd = cursor;
            var value = ValueOrDefault(r1);
            if (r1 != null)
            {
                r0 = this.ReturnHelper<ContentNode>(startCursor0, ref cursor, state =>
                    #line 75 "Markdown.peg"
                  new Text(null,value)
                    #line default
                    );
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<string> EOF(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            if (r0 == null)
            {
                var startCursor0 = cursor;
                IParseResult<string> r1 = null;
                r1 = this.ParseAny(ref cursor);
                cursor = startCursor0;
                if (r1 == null)
                {
                    r0 = this.ReturnHelper<string>(cursor, ref cursor, state => string.Empty);
                }
            }
            if (r0 == null)
            {
                var startCursor1 = cursor;
                IParseResult<string> r2 = null;
                var unexpectedStart = cursor;
                r2 = this.ParseAny(ref cursor);
                var unexpectedEnd = cursor;
                var unexpected = ValueOrDefault(r2);
                if (r2 != null)
                {
                    throw this.ExceptionHelper(startCursor1, state =>
                        #line 79 "Markdown.peg"
                         "Unexpected character '" + unexpected + "'."
                        #line default
                        );
                }
                else
                {
                    cursor = startCursor1;
                }
            }
            return r0;
        }

        private IParseResult<
            #line 81 "Markdown.peg"
     string
            #line default
            > any(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            r0 = this.ParseClass(ref cursor, "\0\uffff");
            return r0;
        }

        private IParseResult<
            #line 85 "Markdown.peg"
         string
            #line default
            > anyChar(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            var startCursor0 = cursor;
            IParseResult<string> r1 = null;
            var startCursor1 = cursor;
            IParseResult<string> r2 = null;
            if (r2 == null)
            {
                r2 = this.ParseLiteral(ref cursor, "\n");
            }
            if (r2 == null)
            {
                r2 = this.ParseLiteral(ref cursor, "\r");
            }
            cursor = startCursor1;
            if (r2 == null)
            {
                r1 = this.ReturnHelper<string>(cursor, ref cursor, state => string.Empty);
            }
            if (r1 != null)
            {
                IParseResult<string> r3 = null;
                r3 = this.any(ref cursor);
                if (r3 != null)
                {
                    {
                        var len = cursor.Location - startCursor0.Location;
                        r0 = this.ReturnHelper<string>(startCursor0, ref cursor, state =>
                            state.Subject.Substring(startCursor0.Location, len)
                            );
                    }
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<
            #line 88 "Markdown.peg"
      string
            #line default
            > text(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            var startCursor0 = cursor;
            IParseResult<IList<string>> r1 = null;
            var valueStart = cursor;
            var startCursor1 = cursor;
            var l0 = new List<string>();
            while (true)
            {
                IParseResult<string> r2 = null;
                r2 = this.anyChar(ref cursor);
                if (r2 != null)
                {
                    l0.Add(r2.Value);
                }
                else
                {
                    break;
                }
            }
            if (l0.Count >= 1)
            {
                r1 = this.ReturnHelper<IList<string>>(startCursor1, ref cursor, state => l0.AsReadOnly());
            }
            else
            {
                cursor = startCursor1;
            }
            var valueEnd = cursor;
            var value = ValueOrDefault(r1);
            if (r1 != null)
            {
                r0 = this.ReturnHelper<string>(startCursor0, ref cursor, state =>
                    #line 89 "Markdown.peg"
                      Flatten(value)
                    #line default
                    );
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<string> ParseLiteral(ref Cursor cursor, string literal, bool ignoreCase = false)
        {
            if (cursor.Location + literal.Length <= cursor.Subject.Length)
            {
                var substr = cursor.Subject.Substring(cursor.Location, literal.Length);
                if (ignoreCase ? substr.Equals(literal, StringComparison.OrdinalIgnoreCase) : substr == literal)
                {
                    var endCursor = cursor.Advance(substr.Length);
                    var result = this.ReturnHelper<string>(cursor, ref endCursor, state => substr);
                    cursor = endCursor;
                    return result;
                }
            }
            return null;
        }

        private IParseResult<string> ParseClass(ref Cursor cursor, string characterRanges, bool negated = false, bool ignoreCase = false)
        {
            if (cursor.Location + 1 <= cursor.Subject.Length)
            {
                var c = cursor.Subject[cursor.Location];
                bool match = false;
                for (int i = 0; !match && i < characterRanges.Length; i += 2)
                {
                    match = c >= characterRanges[i] && c <= characterRanges[i + 1];
                }
                if (!match && ignoreCase && (char.IsUpper(c) || char.IsLower(c)))
                {
                    var cs = c.ToString();
                    for (int i = 0; !match && i < characterRanges.Length; i += 2)
                    {
                        var min = characterRanges[i];
                        var max = characterRanges[i + 1];
                        for (char o = min; !match && o <= max; o++)
                        {
                            match = (char.IsUpper(o) || char.IsLower(o)) && cs.Equals(o.ToString(), StringComparison.CurrentCultureIgnoreCase);
                        }
                    }
                }
                if (match ^ negated)
                {
                    var endCursor = cursor.Advance(1);
                    var substr = cursor.Subject.Substring(cursor.Location, 1);
                    var result = this.ReturnHelper<string>(cursor, ref endCursor, state => substr);
                    cursor = endCursor;
                    return result;
                }
            }
            return null;
        }

        private IParseResult<string> ParseAny(ref Cursor cursor)
        {
            if (cursor.Location + 1 <= cursor.Subject.Length)
            {
                var substr = cursor.Subject.Substring(cursor.Location, 1);
                var endCursor = cursor.Advance(1);
                var result = this.ReturnHelper<string>(cursor, ref endCursor, state => substr);
                cursor = endCursor;
                return result;
            }
            return null;
        }

        private IParseResult<T> ReturnHelper<T>(Cursor startCursor, ref Cursor endCursor, Func<Cursor, T> wrappedCode)
        {
            var result = wrappedCode(endCursor);
            var lexical = result as ILexical;
            if (lexical != null && lexical.StartCursor == null && lexical.EndCursor == null)
            {
                lexical.StartCursor = startCursor;
                lexical.EndCursor = endCursor;
            }
            return new ParseResult<T>(startCursor, endCursor, result);
        }

        private Exception ExceptionHelper(Cursor cursor, Func<Cursor, string> wrappedCode)
        {
            var ex = new FormatException(wrappedCode(cursor));
            ex.Data["cursor"] = cursor;
            return ex;
        }

        private T ValueOrDefault<T>(IParseResult<T> result)
        {
            return result == null
                ? default(T)
                : result.Value;
        }
    }
}
