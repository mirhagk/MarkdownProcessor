// -----------------------------------------------------------------------
// <auto-generated>
//   This code was generated by Pegasus 3.0.0.0
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated.
// </auto-generated>
// -----------------------------------------------------------------------

namespace
#line 1 "Markdown.peg"
           MarkdownProcessor
#line default
{
    using System;
    using System.Collections.Generic;
    using Pegasus.Common;

    /// <summary>
    ///  Parses a string according to the rules of the <see cref="MarkdownParser" /> grammar.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Pegasus", "3.0.0.0")]
    public
    partial class
    #line 2 "Markdown.peg"
           MarkdownParser
    #line default
    {

        /// <summary>
        ///  Parses a string according to the rules of the <see cref="MarkdownParser" /> grammar.
        /// </summary>
        /// <param name="subject">The parsing subject.</param>
        /// <param name="fileName">The optional file name to use in error messages.</param>
        /// <returns>The <see cref="string" /> parsed from <paramref name="subject" />.</returns>
        /// <exception cref="FormatException">
        ///  Thrown when parsing fails against <paramref name="subject"/>.  The exception's <code>Data["cursor"]</code> will be set with the cursor where the fatal error occurred.
        /// </exception>
        public string Parse(string subject, string fileName = null)
        {
            var cursor = new Cursor(subject, 0, fileName);
            var result = this.start(ref cursor);
            if (result == null)
            {
                throw ExceptionHelper(cursor, state => "Failed to parse 'start'.");
            }
            return result.Value;
        }

        private IParseResult<string> start(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            var startCursor0 = cursor;
            IParseResult<string> r1 = null;
            var valueStart = cursor;
            r1 = this.text(ref cursor);
            var valueEnd = cursor;
            var value = ValueOrDefault(r1);
            if (r1 != null)
            {
                IParseResult<string> r2 = null;
                r2 = this.EOF(ref cursor);
                if (r2 != null)
                {
                    r0 = this.ReturnHelper<string>(startCursor0, cursor, state =>
                        #line 5 "Markdown.peg"
                   value
                        #line default
                        );
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<
            #line 7 "Markdown.peg"
      string
            #line default
            > text(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            var startCursor0 = cursor;
            IParseResult<IList<char>> r1 = null;
            var valueStart = cursor;
            var startCursor1 = cursor;
            var l0 = new List<char>();
            while (true)
            {
                IParseResult<char> r2 = null;
                r2 = this.let(ref cursor);
                if (r2 != null)
                {
                    l0.Add(r2.Value);
                }
                else
                {
                    break;
                }
            }
            if (l0.Count >= 0)
            {
                r1 = new ParseResult<IList<char>>(startCursor1, cursor, l0.AsReadOnly());
            }
            else
            {
                cursor = startCursor1;
            }
            var valueEnd = cursor;
            var value = ValueOrDefault(r1);
            if (r1 != null)
            {
                r0 = this.ReturnHelper<string>(startCursor0, cursor, state =>
                    #line 8 "Markdown.peg"
                 string.Join("",value)
                    #line default
                    );
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<
            #line 10 "Markdown.peg"
     char
            #line default
            > let(ref Cursor cursor)
        {
            IParseResult<char> r0 = null;
            var startCursor0 = cursor;
            IParseResult<string> r1 = null;
            var valueStart = cursor;
            r1 = this.ParseAny(ref cursor);
            var valueEnd = cursor;
            var value = ValueOrDefault(r1);
            if (r1 != null)
            {
                r0 = this.ReturnHelper<char>(startCursor0, cursor, state =>
                    #line 11 "Markdown.peg"
            value[0]
                    #line default
                    );
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<string> EOF(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            if (r0 == null)
            {
                var startCursor0 = cursor;
                IParseResult<string> r1 = null;
                r1 = this.ParseAny(ref cursor);
                cursor = startCursor0;
                if (r1 == null)
                {
                    r0 = new ParseResult<string>(cursor, cursor, string.Empty);
                }
            }
            if (r0 == null)
            {
                var startCursor1 = cursor;
                IParseResult<string> r2 = null;
                var unexpectedStart = cursor;
                r2 = this.ParseAny(ref cursor);
                var unexpectedEnd = cursor;
                var unexpected = ValueOrDefault(r2);
                if (r2 != null)
                {
                    throw this.ExceptionHelper(startCursor1, state =>
                        #line 15 "Markdown.peg"
                         "Unexpected character '" + unexpected + "'."
                        #line default
                        );
                }
                else
                {
                    cursor = startCursor1;
                }
            }
            return r0;
        }

        private IParseResult<
            #line 17 "Markdown.peg"
     string
            #line default
            > any(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            r0 = this.ParseClass(ref cursor, "\'\'\0\0\'\'....\'\'\uffff\uffff\'\'");
            return r0;
        }

        private IParseResult<
            #line 21 "Markdown.peg"
         string
            #line default
            > anyChar(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            var startCursor0 = cursor;
            IParseResult<string> r1 = null;
            var startCursor1 = cursor;
            IParseResult<string> r2 = null;
            if (r2 == null)
            {
                r2 = this.ParseLiteral(ref cursor, "\n");
            }
            if (r2 == null)
            {
                r2 = this.ParseLiteral(ref cursor, "\r");
            }
            cursor = startCursor1;
            if (r2 == null)
            {
                r1 = new ParseResult<string>(cursor, cursor, string.Empty);
            }
            if (r1 != null)
            {
                IParseResult<string> r3 = null;
                r3 = this.any(ref cursor);
                if (r3 != null)
                {
                    var len = cursor.Location - startCursor0.Location;
                    r0 = new ParseResult<string>(startCursor0, cursor, cursor.Subject.Substring(startCursor0.Location, len));
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<string> newline(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            var startCursor0 = cursor;
            IParseResult<string> r1 = null;
            r1 = this.ParseLiteral(ref cursor, "\n");
            if (r1 != null)
            {
                r0 = this.ReturnHelper<string>(startCursor0, cursor, state =>
                    #line 26 "Markdown.peg"
         ""
                    #line default
                    );
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<string> ParseLiteral(ref Cursor cursor, string literal, bool ignoreCase = false)
        {
            if (cursor.Location + literal.Length <= cursor.Subject.Length)
            {
                var substr = cursor.Subject.Substring(cursor.Location, literal.Length);
                if (ignoreCase ? substr.Equals(literal, StringComparison.OrdinalIgnoreCase) : substr == literal)
                {
                    var endCursor = cursor.Advance(substr.Length);
                    var result = new ParseResult<string>(cursor, endCursor, substr);
                    cursor = endCursor;
                    return result;
                }
            }
            return null;
        }

        private IParseResult<string> ParseClass(ref Cursor cursor, string characterRanges, bool negated = false, bool ignoreCase = false)
        {
            if (cursor.Location + 1 <= cursor.Subject.Length)
            {
                var c = cursor.Subject[cursor.Location];
                bool match = false;
                for (int i = 0; !match && i < characterRanges.Length; i += 2)
                {
                    match = c >= characterRanges[i] && c <= characterRanges[i + 1];
                }
                if (!match && ignoreCase && (char.IsUpper(c) || char.IsLower(c)))
                {
                    var cs = c.ToString();
                    for (int i = 0; !match && i < characterRanges.Length; i += 2)
                    {
                        var min = characterRanges[i];
                        var max = characterRanges[i + 1];
                        for (char o = min; !match && o <= max; o++)
                        {
                            match = (char.IsUpper(o) || char.IsLower(o)) && cs.Equals(o.ToString(), StringComparison.CurrentCultureIgnoreCase);
                        }
                    }
                }
                if (match ^ negated)
                {
                    var endCursor = cursor.Advance(1);
                    var result = new ParseResult<string>(cursor, endCursor, cursor.Subject.Substring(cursor.Location, 1));
                    cursor = endCursor;
                    return result;
                }
            }
            return null;
        }

        private IParseResult<string> ParseAny(ref Cursor cursor)
        {
            if (cursor.Location + 1 <= cursor.Subject.Length)
            {
                var substr = cursor.Subject.Substring(cursor.Location, 1);
                var endCursor = cursor.Advance(1);
                var result = new ParseResult<string>(cursor, endCursor, substr);
                cursor = endCursor;
                return result;
            }
            return null;
        }

        private IParseResult<T> ReturnHelper<T>(Cursor startCursor, Cursor endCursor, Func<Cursor, T> wrappedCode)
        {
            return new ParseResult<T>(startCursor, endCursor, wrappedCode(endCursor));
        }

        private Exception ExceptionHelper(Cursor cursor, Func<Cursor, string> wrappedCode)
        {
            var ex = new FormatException(wrappedCode(cursor));
            ex.Data["cursor"] = cursor;
            return ex;
        }

        private T ValueOrDefault<T>(IParseResult<T> result)
        {
            return result == null
                ? default(T)
                : result.Value;
        }
    }
}
